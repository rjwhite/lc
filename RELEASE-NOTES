0.1     May 2 2015:
    Initial version

0.2     Oct 1 2017:
    added man-page, LICENSE.txt, missing perldoc info

0.3     Oct 24, 2022:
    - added RELEASE-NOTES
    - added a Makefile
    - over-hauled usage.  added -h (help) option.
    - added -v (version) option
    - changed LICENSE.txt from GNU General Public License to MIT
    - updated README.md.  more info and examples given
    - updated man-page to specify that -v and -h have been added

0.3.1   Oct 30, 2022:
    - fixed some typos in README.md
    - fixed an issues with the lc.1 man-page not displaying an example
      correctly

0.4     Oct 31, 2022:
    lc.plx:
        - total overhaul in handling print formatting to address Issue #1 from
          Ian! Allen: "differing output compared with 2005 UW version in C"
          It still will only have a max of 14 chars per column to be consistent
          with all columns - not just the last one - but the code has been
          totally overhauled to be clearer.
        - changed order of file-types printed to be consistent with original lc
        - include extra newline between file-types when used with option -1 to
          to be consistent with original version
        - code refactoring.
    README.md:
        - made more clear that the behavior is based on the original lc and
          is not guaranteed to be identical behavior

0.5     Nov 1, 2022:
    lc.plx:
        - over-hauled in handling print formatting again.  If there is room to
          squeeze in an entry in the last column even if it is slightly longer
          than the 14 character width, then go for it so long as it is within
          the terminal width.  More aesthetically pleasing.

0.6     Nov 3, 2022:
    lc.plx:
        - refactoring.  getting all line lengths < 80 chars
        - the handling of the spacing is smarter now.

0.7     Nov 11, 2022:
    lc.1:
        - complete rewrite of man page.
          moved old (mostly) UW version to lc-uw.1
    lc.plx:
        - now uses the environment variable LC_COLUMN_WIDTH to change column
          width from default of 14 characters
        - added more info to perldoc and corrected some info
    README.md:
        - updated

0.8     Nov 26, 2022:
    lc.plx:
        - now has a mainline, reducing globals to $G_progname and $G_version
        - added an error() function with flag for whether to exit or not
        - prints useful error messages if LC_COLUMN_WIDTH is wrong (Issue #2)
        - wasn't printing command for usage (-h)
        - no such pathname now treated like any other error - to STDERR
        - refactoring, more/better comments

0.9     Nov 30, 2022:
    lc.plx:
        - better error reporting when directory fails to open (no perms, etc)
        - better memory management - only store filename if we want that type
        - total redesign, several new subroutines to break up huge mainline
        - new subroutines: process_options(), get_file_type(), process_dirs(),
          get_term_width(), get_column_width(), print_version()
        - process_options() totally overhauls how command-line options are
          handled.  No longer just a BigAss cascading if-then-else statements
        - updated regular expression usage to add /x to shut up perlcritic
        - now passes level 3 (harsh) checks by perlcritic.
          Before it only passed levels 4 (stern) and 5 (gentle).
          Although now disabling perlcritic check of ProhibitExcessComplexity
          in process_dirs() which scores 31 (above the default value of 20)
          in level 3 (harsh).  Previously main() scored 63 before simplifying.
        - no longer prints *anything* if -n used.  Before it printed top-level
          directory headings when more than 1 directory given.
        - added new option -S for listing sockets (-s was already taken)
    lc.1:
        - added -S (sockets)
        - clarified that -s (special) means -b and -c, and not confused with
          the special files of -a (. and ..)
    README.md:
        - minor updates of examples.

    It's ironic that in an experiment to remove the perlcritic complaints
    about excess complexity and cascading if-then-else, the result is
    now a complicated process_options().  Not sure how I feel about this.
    The cascading if-then-else of command-line processing may be considered
    ugly by some - but it is easy to understand. The guts of process_options()
    can always be changed back to use if-then-else later if desired.  But the
    new structure did make it trivial to add the new option -S.  Just one line:
        'S' => [ $C_ACTION_SET_FLAG, $print_ref, $C_SOCKETS ],
    And then just add one extra line for the usage().
    It also made it easier and cleaner to implement -s (special files):
        's' => [ $C_ACTION_SET_FLAG, $print_ref, $C_CHAR_SPEC, $C_BLOCK_SPEC ],
    So I think I'll keep it (for now...)

    It did introduce behaviour which I normally avoid.  I normally try to
    have a single place in a program where it can exit - after receiving
    an error status from main().  But now you can exit from process_options()
    when handling help (-h) and printing the version (-v):
        'h' => [ $C_ACTION_CODE, \&usage,         $C_EXIT_YES ],
        'v' => [ $C_ACTION_CODE, \&print_version, $C_EXIT_YES ],
    which causes the function to run and then immediately exit.
